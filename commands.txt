## Commands
This section lists command(s) run by minimap2 workflow

* Running minimap2

=== Ensures the read-group information is valid, and in the correct format prior to running the rest of the workflow ===.

```
    set -euo pipefail 
    
    # Split the string into an array 
    IFS=$'\\t' read -ra readFields <<< ~{readGroups}
    idPresent=false

    for field in "${readFields[@]}"; do 
      if [[ $field == ID:* ]]; then idPresent=true; break; fi
    done 

    # Confirm if string begins with '@RG' and 'ID' field is present
    if ! [[ ~{readGroups} == @RG* ]] ; then 
      echo "The read group line is not started with @RG" >&2; exit 1
    fi
    if ! $idPresent ; then echo "Missing ID within the read group line" >&2; exit 1 ; fi
```

=== Parallelizes the alignment by splitting the fastq files into chunks. Subsequent steps will be run on the fastq chunks (Optional) ===.

```
    if [ -z "~{numReads}" ]; then
      totalLines=$(zcat ~{fastqR1} | wc -l)
    else totalLines=$((~{numReads}*4))
    fi
    
    python3 -c "from math import ceil; print (int(ceil(($totalLines/4.0)/~{numChunk})*4))"

    slicer -i ~{fastqR} -l ~{chunkSize} --gzip 
```

=== Trims off the UMI bases (Optional) ===.

```
    barcodex-rs --umilist ~{umiList} --prefix ~{outputPrefix} --separator "__" inline \
    --pattern1 '~{pattern1}' --r1-in ~{fastq1} \
    ~{if (defined(fastq2)) then "--pattern2 '~{pattern2}' --r2-in ~{fastq2} " else ""}

    cat ~{outputPrefix}_UMI_counts.json > umiCounts.txt

    tr [,] ',\n' < umiCounts.txt | sed 's/[{}]//' > tmp.txt
    echo "{$(sort -i tmp.txt)}" > new.txt
    tr '\n' ',' < new.txt | sed 's/,$//' > ~{outputPrefix}_UMI_counts.json
```

=== Trims off adapter sequence (Optional) ===.

```
    cutadapt -q ~{trimMinQuality} \
            -m ~{trimMinLength} \
            -a ~{adapter1} \
            -o ~{resultFastqR1} \
            ~{if (defined(fastqR2)) then "-A ~{adapter2} -p ~{resultFastqR2} " else ""} \
            ~{if (doUMItrim) then "-u ~{umiLength} -U ~{umiLength} " else ""} \
            ~{addParam} \
            ~{fastqR1} \
            ~{fastqR2} > ~{resultLog}
```

=== Align to reference using minimap2 ===.

```    
    minimap2 \
          -ax sr ~{index} \
          ~{read1s} \
          ~{if (defined(read2s)) then "~{read2s}" else ""} \
          --MD \
          -R ~{readGroups} \
          ~{addParam} \
    | \
    samtools view -b - \
    | \
    samtools sort -O bam -T ~{tmpDir} -o ~{resultBam} - 
```

=== Merge parallelized alignments (if the fastq was split) and sort the BAM file ===.

```
    samtools merge \
      -c \
      ~{resultMergedBam} \
      ~{sep=" " outputBams} 
```

=== Indexes the merged BAM file ===.

```
    samtools index ~{inputBam} ~{resultBai}
```

=== Merges parallelized adapter trimming logs ===.

```
    COMMANDS NOT SHOWN, see WDL for details
```